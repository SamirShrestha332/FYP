import express from 'express';
import { createPool } from 'mysql2';
import cors from 'cors';
import bodyParser from 'body-parser'; // Correct import for body-parser
import bcrypt from 'bcrypt';         // Correct import for bcrypt

const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json()); // No destructuring needed; use directly

// MySQL database connection (using createPool)
const db = createPool({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'hamro_job', 
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

// Signup
app.post('/signup', async (req, res) => {
    console.log('Signup request received:', req.body);
    const { firstName, lastName, email, password, role } = req.body;

    // Basic validation
    if (!firstName || !lastName || !email || !password) {
        return res.status(400).json({ message: 'All fields are required' });
    }

    try {
        // Check if email already exists
        const checkEmailQuery = 'SELECT * FROM users WHERE email = ?';
        db.query(checkEmailQuery, [email], async (err, results) => {
            if (err) {
                console.error('Email check error:', err);
                return res.status(500).json({ message: 'Something went wrong, please try again.', error: err.message });
            }

            if (results.length > 0) {
                return res.status(400).json({ message: 'Email already exists. Please use a different email.' });
            }

            // If email doesn't exist, proceed with signup
            try {
                const hashedPassword = await bcrypt.hash(password, 10);
                
                // Create username from firstName and lastName
                const username = `${firstName} ${lastName}`;
                
                // Insert user with active status
                const query = 'INSERT INTO users (username, email, password, role, status) VALUES (?, ?, ?, ?, ?)';
                const values = [username, email, hashedPassword, role || 'seeker', 'active'];
                
                console.log('Executing query:', query);
                console.log('With values:', values.map((val, i) => i === 2 ? '[HASHED PASSWORD]' : val));
                
                db.query(query, values, (err, result) => {
                    if (err) {
                        console.error('Signup error details:', err);
                        return res.status(500).json({ message: 'Something went wrong, please try again.', error: err.message });
                    }
                    
                    console.log('User created successfully:', result);
                    res.status(201).json({ message: 'Account created successfully!' });
                });
            } catch (hashError) {
                console.error("Password hashing error:", hashError);
                return res.status(500).json({ message: 'Error hashing password', error: hashError.message });
            }
        });
    } catch (error) {
        console.error("Server error:", error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
});

// Login
app.post('/login', (req, res) => {
    console.log('Login request received:', { email: req.body.email, password: '[HIDDEN]' });
    const { email, password } = req.body;

    // Basic validation
    if (!email || !password) {
        return res.status(400).json({ message: 'Email and password are required' });
    }

    // Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        return res.status(400).json({ message: 'Please enter a valid email address' });
    }

    const query = 'SELECT * FROM users WHERE email = ?';
    db.query(query, [email], async (err, results) => {
        if (err) {
            console.error('Login error:', err);
            return res.status(500).json({ message: 'Something went wrong, please try again.', error: err.message });
        }

        if (results.length === 0) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const user = results[0];
        
        try {
            const passwordMatch = await bcrypt.compare(password, user.password);
            if (!passwordMatch) {
                console.log('Password does not match for user:', email);
                return res.status(401).json({ message: 'Invalid credentials' });
            }

            console.log('User logged in successfully:', email);
            // Return user data that matches your database structure
            res.status(200).json({
                message: 'Login successful!',
                user: {
                    id: user.id,
                    username: user.username,
                    email: user.email,
                    role: user.role,
                    status: user.status
                }
            });
        } catch (error) {
            console.error('Password comparison error:', error);
            return res.status(500).json({ message: 'Authentication error', error: error.message });
        }
    });
});

// Admin Login
app.post('/admin/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        // Query to find admin user
        const query = 'SELECT * FROM admin_users WHERE email = ?';
        
        db.query(query, [email], async (err, results) => {
            if (err) {
                console.error('Admin login error:', err);
                return res.status(500).json({ 
                    success: false, 
                    message: 'Something went wrong, please try again.' 
                });
            }

            if (results.length === 0) {
                return res.status(401).json({ 
                    success: false, 
                    message: 'Invalid email or password' 
                });
            }

            const admin = results[0];
            
            // Compare password
            // const passwordMatch = await bcrypt.compare(password, admin.password);
            // For plain text passwords (not recommended for production)
            const passwordMatch = password === admin.password;
            
            if (!passwordMatch) {
                return res.status(401).json({ 
                    success: false, 
                    message: 'Invalid email or password' 
                });
            }

            // Remove password from response
            delete admin.password;
            
            // Create a simple token (in production, use JWT)
            const token = Math.random().toString(36).substring(2, 15) + 
                          Math.random().toString(36).substring(2, 15);
            
            res.json({
                success: true,
                message: 'Login successful',
                admin,
                token
            });
        });
    } catch (error) {
        console.error('Admin login error:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Server error' 
        });
    }
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});